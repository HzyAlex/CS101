Layer1 : y = x+ 1
Linear: w1 b1

Layer2 : z = 2 * y + 2 
Linear w2 b2

======
z =  2 (x + 1)  + 2
Layer1 w1 b1



Step1:

W1 = 1 
W2 = 1 
B1 = 1

Cost Gradient --> (0.5, 0.3, 0.4)

step2:
step_size = 1
w1 = 1 + -1 * (0.5) * step_size  =  0.5 
w2 = 1 + -1 * (0.3) * step_size  =  0.7
W3 = 0.6

Cost Gradient ==> (x1,x2,x3)
update w1 w2 w3

Cost Gradient ==> (x1,x2,x3)
update w1 w2 w3

Cost Gradient ==> (x1,x2,x3)


=================

Layer1:
Y = 1 / X

Layer2:
Y = 1+ X

Layer3:
Y = e^(X)

Layer4:
Y = -1 * x
====================================




Node C:
forward: 
input: B
output: C


Node F  -->  Node E                        -->  Node C
F(E)          E(C)                               C(B) 
dF/dE         dE/dC                              dC/dB
dF/dE        dF/dC= dE/dC* dF/dE              dF/dB= dF/dC* dc/dB

                                                      d   * 
													  
A = weight/bias


import numpy as np

class FullyConnect:
    def __init__(self, l_x, l_y):  # 两个参数分别为输入层的长度和输出层的长度
        self.weights = np.random.randn(l_y, l_x)  # 使用随机数初始化参数
        self.bias = np.random.randn(1)  # 使用随机数初始化参数

    def forward(self, x):
        self.x = x  # 把中间结果保存下来，以备反向传播时使用
        self.y = np.dot(self.weights, x) + self.bias  # 计算y = w11*a1+w12*a2+bias1 = w*x + b 
        return self.y  # 将这一层计算的结果向前传递
		
	def backward(self, d):	:
		self.dw = self.x * d
		self.db = 1 * d
		
		
		self.dx = self.weights * d
		
		return  self.dw,self.db ------> Gradient!!!!!!!
		


=======================
       dF
input: --
       dE

dF    DF     DE
-- =  -- *   --
dc    DE     DC

C = A * B


output : 
dF
--
dc



Step1:
forward:
A ~ F.......


step2:

NodeE: DF/DE = 1/E*E  = 1/4
Nodec: DF/DC = DF/DE * DE/DC = 1/4 * 1 = 1/4 
NodeB: DF/DB = DF/DC * DC/DB = 1/4 * 1
                         1 





Node C:
Backward: 
input: dF/dC
output: dF/dB = dF/dC * dC/dB
                  

Node E:
Backward: 
input: dF/dE
output: dF/dC = dF/dE * dE/dc


Node A
Backward:
Input: DF/DA
output: DF/DA * DA/Dx(1)

if x is weight/bias
output: DF/DA * DA/Dx
         b   *  dw/db 







